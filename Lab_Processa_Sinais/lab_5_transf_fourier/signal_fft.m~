function signal_fft(t,sinal,duplicar_amostras)
% signal_fft.m
% Mostra o espectro de um sinal baseado na FFT do sinal
% Usa função `fft()` e `fftshit()` para obter o espectro
% Baseado em rotina original Prof. Mikhail Polonskii
% Parâmetros de entrada
%   t = vetor tempo (em segundos): posição temporal de cada amostra
%   signal = amplitude do sinal em cada instante de tempo
%   k_ini = primeira amostra
%   k_fim = última amostra
%   duplicar_amostras = 1 (duplica) ou 0 (não duplicar)


u = length(sinal);
% fprintf('Número de amostras totais: %d\n', u);
k_ini = 1;
k_fim = u;
tt = t(k_fim) - t(k_ini);
n = k_fim - k_ini + 1;
I = sinal(k_ini:k_fim);   % separando a região de interesse
fprintf('signal_fft >> Intervalo de tempo considerado: [%g, %g]\n', t(k_ini), t(k_fim));
if duplicar_amostras == 1
    for k = 1:2*n   % duplicar número de amostras
        if (k <= n)
            I2(k) = I(k);
        else
            I2(k) = I(k-n);
        end
    end
    n = 2*n;    % dobrou numero de amostras
    tt = 2*tt;
else
    I2 = I;
end

figure; subplot(2,1,1)
% plot(t,I2)
title('Sinal analisado (domínio tempo)')
xlabel('t (segundos)')
grid

Fnyq = n/tt;    % dobro da freq. de Nyquist
f = fft(I2);    % DFT sobre o sinal, retorna n-pontos (n=length(I2))
Freq = -Fnyq/2: Fnyq/n: Fnyq/2-1/n;     % formar escala de frequencias
zz = 2*abs(fftshift(f))/n;  % desloca o componente da frequencia zero (nível DC) do sinal no centro do espectro obtido via fft()

subplot(2,1,2)
plot(Freq, zz);
title('Sinal analisado (domínio Frequência)')
xlabel('Frequência (Hz)')
axis([0 max(Freq)*1.1 0 max(zz)*1.1])
grid






